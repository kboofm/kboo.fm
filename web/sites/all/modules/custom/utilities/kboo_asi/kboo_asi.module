<?php

require_once('kboo_asi.inc');
require_once('kboo_asi.overhead.inc');

function kboo_asi_menu()
{
	$items = array(
		'kboo/asi' => array(
			'page callback' => 'kboo_asi_working',
			'access callback' => 'kboo_asi_perm',
		),
		'kboo/asi/test' => array(
			'page callback' => 'kboo_asi_test_wrapper',
			'access callback' => 'kboo_asi_perm',
		),
	);
	return $items;
}

function ___kboo_asi_cron()
{
	return;
}

function kboo_asi_test_wrapper()
{
	$out = '';
	//make sure db up to date and imported
	if(!kboo_asi_db_uptodate(TRUE, FALSE))
	{
		$out .= kboo_asi_get_as_db() ? "Got db" : "failed download";
dpm('to that');
		$out .= kboo_asi_import_as_db() ? "<br>Imported db" : "<BR>Failed import";
dpm('to this');
	}

$j = variable_get('kboo_asi_edit_max_ref', 0);
dpm($j);

	//make sure updates to nodes logged in drupal db in kboo_asi_resource table

	//this runs about 7-8 times before timeout.  not difficult to initially populate w/o messing with drupal batch
dpm('foobar');
	$count = 1;
	while(kboo_asi_populate_res_log())
	{
		$out .= "<br>Ran populate log script $count times.";
		$count++;
	}

dpm('baz');
	//compare values in kboo_asi_resource table to determine which nodes need created or updated
	//first handle creation.
	$count = 1;
	while(kboo_asi_check_no_nodes())
	{
		$out .= "<br>Ran populate new node script $count times.";
		$count++;
break;
	}

/*
	//second handle updates
	//kboo_asi_check_updated_nodes();
	$count = 1;
	while(kboo_asi_check_updated_nodes())
	{
		$out .= "<br>Ran populate new node script $count times.";
		$count++;
	}
*/

	return $out;
}
 
function kboo_asi_working()
{
	//all audio resources have type 4
	$resources = array();
	$fkeys = kboo_asi_get_keys();
	db_set_active('archive');
	$q = db_query('select * from resource where resource_type = 4 order by ref asc limit 20');
	while($r = $q->fetchObject())
	{
		$resource = array();
		foreach($r as $label => $column)
		{
			if(substr($label, 0, 5) == 'field')
			{
				$fkey = substr($label, 5);
				$ftit = $fkeys[$fkey]['title'];
				$resource[$ftit] = $column;
			}
			else
			{
				$resource[$label] = $column;
			}
		}
		$resources[$r->ref] = $resource;
	}
	db_set_active('default');
dpm($resources[15715], 'resource 15715');
$j = kboo_asi_get_keywords(15715);
$out = 'keywords: <br>' . print_r($j, TRUE);
dpm($j, 'keywords on it');
$j = kboo_asi_get_rdata(15715);
$out .= 'resource data:<br>' . print_r($j, TRUE);
dpm($j, 'resource data on it');
$j = kboo_asi_get_files(15715);
$out .= 'files: <br>' . print_r($j, TRUE);
dpm($j, 'files on it');
return '<pre>' . $out . '</pre>';
	return '';
}

function kboo_asi_perm()
{
return TRUE;
	global $user;
	if($user->uid == 1 || /*$user->uid == 5872 || */$user->uid == 88)
	{
		return TRUE;
	}
	return FALSE;
}


