<?php

require_once('kboo_asi.inc');
require_once('kboo_asi.overhead.inc');

function kboo_asi_menu()
{
	$items = array(
		'kboo/asi' => array(
			'page callback' => 'kboo_asi_working',
			'access callback' => 'kboo_asi_perm',
		),
		'kboo/asi/admin' => array(
			'page callback' => 'kboo_asi_admin',
			'access callback' => 'kboo_asi_perm',
		),
		'kboo/asi/test' => array(
			'page callback' => 'kboo_asi_test_wrapper',
			'access callback' => 'kboo_asi_perm',
		),
		'kboo/asi/test2' => array(
			'page callback' => 'kboo_asi_test_wrapper_foo',
			'access callback' => 'kboo_asi_perm',
		),
		'kboo/asi/import_nonode' => array(
			'page callback' => 'kboo_asi_import_nonode',
			'access callback' => 'kboo_asi_perm',
		),
		'kboo/asi/import_updates' => array(
			'page callback' => 'kboo_asi_import_updates',
			'access callback' => 'kboo_asi_perm',
		),
		'kboo/asi/proc_filequeue' => array(
			'page callback' => 'kboo_asi_proc_filequeue',
			'access callback' => 'kboo_asi_perm',
		),
	);
	return $items;
}

function ___kboo_asi_cron()
{
	return;
}

function kboo_asi_admin()
{
	return drupal_get_form('kboo_asi_admin_form');
}

function kboo_asi_admin_form($form, &$form_state)
{
	$form['latest_db'] = array(
		'#type' => 'markup',
		'#markup' => "Current DB is dated " . kboo_asi_latest_db(TRUE),
		'#prefix' => '<div id="kboo-asi-db-wrap">',
		'#suffix' => '</div>',
	);

	$form['get_db'] = array(
		'#type' => 'button',
		'#value' => 'Get and import newest ArchiveSpace database',
		'#attributes' => array('class' => array()),
		'#ajax' => array(
			'callback' => 'kboo_asi_get_db_ajax',
			'wrapper' => 'kboo-asi-db-download',
		),
		'#suffix' => '<div id="kboo-asi-db-download"></div>',
	);
	$form['asset_list'] = array(
		'#type' => 'markup',
		'#markup' => kboo_asi_asset_table(),
	);
	$form['asset_list_queued'] = array(
		'#type' => 'markup',
		'#markup' => kboo_asi_asset_table(1),
	);
	$form['pop_res_log'] = array(
		'#type' => 'button',
		'#value' => 'Re-populate Resource Log from ArchiveSpace',
		'#attributes' => array('class' => array()),
		'#ajax' => array(
			'callback' => 'kboo_asi_pop_rlog',
			'wrapper' => 'kboo-asi-pop-rlog',
		),
		'#suffix' => '<div id="kboo-asi-pop-rlog"></div>',
	);
	$form['get_qd_assets'] = array(
		'#type' => 'button',
		'#value' => 'Import Queued Assets',
		'#attributes' => array('class' => array()),
		'#ajax' => array(
			'callback' => 'kboo_asi_get_qd_assets_ajax',
			'wrapper' => 'kboo-asi-qd-asset-import',
		),
		'#suffix' => '<div id="kboo-asi-qd-asset-import"></div>',
	);
	$form['files_list'] = array(
		'#type' => 'markup',
		'#markup' => kboo_asi_files_table(),
	);
	$form['files_bad_list'] = array(
		'#type' => 'markup',
		'#markup' => kboo_asi_files_table(3),
	);
	$form['get_files'] = array(
		'#type' => 'button',
		'#value' => 'Get and import newest ArchiveSpace database',
		'#attributes' => array('class' => array()),
		'#ajax' => array(
			'callback' => 'kboo_asi_get_db_ajax',
			'wrapper' => 'kboo-asi-db-download',
		),
		'#suffix' => '<div id="kboo-asi-db-download"></div>',
	);

/*
	$form['import_db'] = array(
		'#type' => 'button',
		'#value' => 'Import Newest Database',
		'#ajax' => array(
			'callback' => 'kboo_asi_import_db_ajax',
			'wrapper' => 'kboo-asi-db-import',
		),
		'#suffix' => '<div id="kboo-asi-db-import"></div>',
	);
*/

	//button to download latest db by calling kboo_asi_get_as_db($drush = FALSE)

	return $form;
}

function kboo_asi_files_table($picks = 2)
{
	drupal_add_css(drupal_get_path('module', 'kboo_asi') . '/kboo_asi.css');
	$q = db_select('kboo_asi_res_files', 'k')->extend('PagerDefault')->extend('TableSort')
		->fields('k')
		->orderBy('res', 'asc')
		->limit(20);
	if($picks == 3)
	{
		$q->condition('status', 20, '<>');
	}
	$vals = $q->execute();
	$list = array();
	$stats = array(
		1 => 'Queued for download attempt',
		2 => 'Fetching now',
		3 => 'On webserver not Drupal',
		10 => 'Not found on AS',
		15 => 'Exists in Drupal',
		20 => 'All good',
	);
	foreach($vals as $val)
	{
		$list[] = array($val->res, '<a href="/node/' . $val->nid . '">' . $val->nid . '</a>', $val->filename, $val->filepath, $stats[$val->status]);
	}
	$header = array("Resource ID", "NID", "Filename", "Path on Archive Server", "Status");
	$caption = "Current Archive Space Files";
	if($picks == 3)
	{
		$caption = "Current Spurious Files";
	}
	//$picks evidently have to be consecutive.  drupal behaves wonky passing scattered ints as $el to pager
	return _kboo_asi_gen_list($list, $header, $caption, $picks);
}

function kboo_asi_asset_table($qd = 0)
{
	drupal_add_css(drupal_get_path('module', 'kboo_asi') . '/kboo_asi.css');
	$q = db_select('kboo_asi_resource', 'k')->extend('PagerDefault')->extend('TableSort')
		->fields('k')
		->orderBy('res', 'asc')
		->limit(20);
	if($qd == 1)
	{
		$q->condition('asdate', 'drdate', '>');
	}
	$vals = $q->execute();
	$list = array();
	foreach($vals as $val)
	{
		$list[] = array($val->res, $val->asdate, $val->drdate, '<a href="/node/' . $val->nid . '">' . $val->nid . '</a>');
	}
	$header = array("Resource ID", "Archive Space edit date", "Drupal import date", "NID");
	$caption = "Current Archive Space Resources";
	if($qd == 1)
	{
		$caption = "Current Resources Queued for Import";
	}
	return _kboo_asi_gen_list($list, $header, $caption, $qd);
}

function kboo_asi_get_db_ajax($form, $form_state)
{
	$ret = kboo_asi_get_as_db();
	if($ret)
	{
		$ret = kboo_asi_import_as_db(FALSE, TRUE);
		return "Grabbed and imported " . $ret;
	}
	else
	{
		return "Error.";
	}
}

/*
function kboo_asi_import_db_ajax($form, $form_state)
{
	$ret = kboo_asi_import_as_db(FALSE, TRUE);
	return '<div id="kboo-asi-db-import">Successfully imported ' . $ret . '</div>';
}
*/

function kboo_asi_test_wrapper_foo()
{
	$out = '';
	$foo = array();
#	kboo_asi_check_no_nodes($foo);
$j = kboo_asi_get_files(15715);
	return $out;
}

function kboo_asi_import_nonode()
{
	$out = '';
	//make sure db up to date and imported
	if(!kboo_asi_db_uptodate(TRUE, FALSE))
	{
		$out .= kboo_asi_get_as_db() ? "Got db" : "failed download";
		$out .= kboo_asi_import_as_db() ? "<br>Imported db" : "<BR>Failed import";
	}

$j = variable_get('kboo_asi_edit_max_ref', 0);
dpm($j);
	//make sure updates to nodes logged in drupal db in kboo_asi_resource table

	//this runs about 7-8 times before timeout.  not difficult to initially populate w/o messing with drupal batch
	$count = 1;
	while(kboo_asi_populate_res_log())
	{
		$out .= "<br>Ran populate log script $count times.";
		$count++;
	}

	//compare values in kboo_asi_resource table to determine which nodes need created or updated
	//first handle creation.
	$count = 1;

	$foo = kboo_asi_no_nodes_batch();
	return $out;
}

function kboo_asi_import_updates()
{
	//handle updates
	$foo = kboo_asi_update_nodes_batch();
	return '';
}
 
function kboo_asi_working()
{
	//all audio resources have type 4
	$resources = array();
	$fkeys = kboo_asi_get_keys();
dpm($fkeys, 'fkeys');
	db_set_active('archive');
$testres = 17559;
	$q = db_query('select * from resource where resource_type = 4 and ref=:r order by ref asc limit 20', array(':r'=>$testres));
	while($r = $q->fetchObject())
	{
		$resource = array();
		foreach($r as $label => $column)
		{
			if(substr($label, 0, 5) == 'field')
			{
				$fkey = substr($label, 5);
				$ftit = $fkeys[$fkey]['title'];
				$resource[$ftit] = $column;
			}
			else
			{
				$resource[$label] = $column;
			}
		}
		$resources[$r->ref] = $resource;
	}
	db_set_active('default');
#dpm($resources[$testres], 'resource ' . $testres);
$j = kboo_asi_get_keywords($testres);
$out = 'keywords: <br>' . print_r($j, TRUE);
dpm($j, 'keywords on it');
$rdata = kboo_asi_get_rdata($testres);
$out .= 'resource data:<br>' . print_r($rdata, TRUE);
dpm($rdata, 'resource data on it');

$airdate = kboo_asi_grab_airdate($j['Date'], $testres);
dpm($airdate, 'airdate');
$n = $airdate->format('U');
dpm($n, 'formatted');

$j = kboo_asi_get_files($testres, $rdata);
$out .= 'files: <br>' . print_r($j, TRUE);
dpm($j, 'files on it');
return '<pre>' . $out . '</pre>';
	return '';
}

function kboo_asi_perm()
{
return TRUE;
	global $user;
	if($user->uid == 1 || /*$user->uid == 5872 || */$user->uid == 88)
	{
		return TRUE;
	}
	return FALSE;
}


